/**
 *
 *  Staff.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Staff.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Staff::Cols::_id = "id";
const std::string Staff::Cols::_index_id = "index_id";
const std::string Staff::Cols::_uid = "uid";
const std::string Staff::Cols::_name = "name";
const std::string Staff::Cols::_pic_url = "pic_url";
const std::string Staff::Cols::_feature = "feature";
const std::string Staff::Cols::_register_time = "register_time";
const std::string Staff::primaryKeyName = "id";
const bool Staff::hasPrimaryKey = true;
const std::string Staff::tableName = "staff";

const std::vector<typename Staff::MetaData> Staff::metaData_={
{"id","uint64_t","integer",8,1,1,1},
{"index_id","uint64_t","integer",8,0,0,0},
{"uid","std::string","text",0,0,0,0},
{"name","std::string","text",0,0,0,0},
{"pic_url","std::string","text",0,0,0,0},
{"feature","std::vector<char>","blob",0,0,0,0},
{"register_time","std::string","text",0,0,0,0}
};
const std::string &Staff::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Staff::Staff(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["index_id"].isNull())
        {
            indexId_=std::make_shared<uint64_t>(r["index_id"].as<uint64_t>());
        }
        if(!r["uid"].isNull())
        {
            uid_=std::make_shared<std::string>(r["uid"].as<std::string>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["pic_url"].isNull())
        {
            picUrl_=std::make_shared<std::string>(r["pic_url"].as<std::string>());
        }
        if(!r["feature"].isNull())
        {
            feature_=std::make_shared<std::vector<char>>(r["feature"].as<std::vector<char>>());
        }
        if(!r["register_time"].isNull())
        {
            registerTime_=std::make_shared<std::string>(r["register_time"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            indexId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            uid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            picUrl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            feature_=std::make_shared<std::vector<char>>(r[index].as<std::vector<char>>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            registerTime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Staff::Staff(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            indexId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            uid_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto str = pJson[pMasqueradingVector[5]].asString();
            feature_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            registerTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

Staff::Staff(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("index_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["index_id"].isNull())
        {
            indexId_=std::make_shared<uint64_t>((uint64_t)pJson["index_id"].asUInt64());
        }
    }
    if(pJson.isMember("uid"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["uid"].isNull())
        {
            uid_=std::make_shared<std::string>(pJson["uid"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("pic_url"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["pic_url"].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson["pic_url"].asString());
        }
    }
    if(pJson.isMember("feature"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["feature"].isNull())
        {
            auto str = pJson["feature"].asString();
            feature_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("register_time"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["register_time"].isNull())
        {
            registerTime_=std::make_shared<std::string>(pJson["register_time"].asString());
        }
    }
}

void Staff::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            indexId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            uid_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto str = pJson[pMasqueradingVector[5]].asString();
            feature_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            registerTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

void Staff::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("index_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["index_id"].isNull())
        {
            indexId_=std::make_shared<uint64_t>((uint64_t)pJson["index_id"].asUInt64());
        }
    }
    if(pJson.isMember("uid"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["uid"].isNull())
        {
            uid_=std::make_shared<std::string>(pJson["uid"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("pic_url"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["pic_url"].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson["pic_url"].asString());
        }
    }
    if(pJson.isMember("feature"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["feature"].isNull())
        {
            auto str = pJson["feature"].asString();
            feature_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("register_time"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["register_time"].isNull())
        {
            registerTime_=std::make_shared<std::string>(pJson["register_time"].asString());
        }
    }
}

const uint64_t &Staff::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Staff::getId() const noexcept
{
    return id_;
}
void Staff::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Staff::PrimaryKeyType & Staff::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &Staff::getValueOfIndexId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(indexId_)
        return *indexId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Staff::getIndexId() const noexcept
{
    return indexId_;
}
void Staff::setIndexId(const uint64_t &pIndexId) noexcept
{
    indexId_ = std::make_shared<uint64_t>(pIndexId);
    dirtyFlag_[1] = true;
}
void Staff::setIndexIdToNull() noexcept
{
    indexId_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Staff::getValueOfUid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(uid_)
        return *uid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Staff::getUid() const noexcept
{
    return uid_;
}
void Staff::setUid(const std::string &pUid) noexcept
{
    uid_ = std::make_shared<std::string>(pUid);
    dirtyFlag_[2] = true;
}
void Staff::setUid(std::string &&pUid) noexcept
{
    uid_ = std::make_shared<std::string>(std::move(pUid));
    dirtyFlag_[2] = true;
}
void Staff::setUidToNull() noexcept
{
    uid_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Staff::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Staff::getName() const noexcept
{
    return name_;
}
void Staff::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[3] = true;
}
void Staff::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[3] = true;
}
void Staff::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Staff::getValueOfPicUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(picUrl_)
        return *picUrl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Staff::getPicUrl() const noexcept
{
    return picUrl_;
}
void Staff::setPicUrl(const std::string &pPicUrl) noexcept
{
    picUrl_ = std::make_shared<std::string>(pPicUrl);
    dirtyFlag_[4] = true;
}
void Staff::setPicUrl(std::string &&pPicUrl) noexcept
{
    picUrl_ = std::make_shared<std::string>(std::move(pPicUrl));
    dirtyFlag_[4] = true;
}
void Staff::setPicUrlToNull() noexcept
{
    picUrl_.reset();
    dirtyFlag_[4] = true;
}

const std::vector<char> &Staff::getValueOfFeature() const noexcept
{
    const static std::vector<char> defaultValue = std::vector<char>();
    if(feature_)
        return *feature_;
    return defaultValue;
}
std::string Staff::getValueOfFeatureAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(feature_)
        return std::string(feature_->data(),feature_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Staff::getFeature() const noexcept
{
    return feature_;
}
void Staff::setFeature(const std::vector<char> &pFeature) noexcept
{
    feature_ = std::make_shared<std::vector<char>>(pFeature);
    dirtyFlag_[5] = true;
}
void Staff::setFeature(const std::string &pFeature) noexcept
{
    feature_ = std::make_shared<std::vector<char>>(pFeature.c_str(),pFeature.c_str()+pFeature.length());
    dirtyFlag_[5] = true;
}
void Staff::setFeatureToNull() noexcept
{
    feature_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Staff::getValueOfRegisterTime() const noexcept
{
    const static std::string defaultValue = std::string();
    if(registerTime_)
        return *registerTime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Staff::getRegisterTime() const noexcept
{
    return registerTime_;
}
void Staff::setRegisterTime(const std::string &pRegisterTime) noexcept
{
    registerTime_ = std::make_shared<std::string>(pRegisterTime);
    dirtyFlag_[6] = true;
}
void Staff::setRegisterTime(std::string &&pRegisterTime) noexcept
{
    registerTime_ = std::make_shared<std::string>(std::move(pRegisterTime));
    dirtyFlag_[6] = true;
}
void Staff::setRegisterTimeToNull() noexcept
{
    registerTime_.reset();
    dirtyFlag_[6] = true;
}

void Staff::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Staff::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "index_id",
        "uid",
        "name",
        "pic_url",
        "feature",
        "register_time"
    };
    return inCols;
}

void Staff::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIndexId())
        {
            binder << getValueOfIndexId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPicUrl())
        {
            binder << getValueOfPicUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFeature())
        {
            binder << getValueOfFeature();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRegisterTime())
        {
            binder << getValueOfRegisterTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Staff::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void Staff::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIndexId())
        {
            binder << getValueOfIndexId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPicUrl())
        {
            binder << getValueOfPicUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFeature())
        {
            binder << getValueOfFeature();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRegisterTime())
        {
            binder << getValueOfRegisterTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Staff::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getIndexId())
    {
        ret["index_id"]=(Json::UInt64)getValueOfIndexId();
    }
    else
    {
        ret["index_id"]=Json::Value();
    }
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getPicUrl())
    {
        ret["pic_url"]=getValueOfPicUrl();
    }
    else
    {
        ret["pic_url"]=Json::Value();
    }
    if(getFeature())
    {
        ret["feature"]=drogon::utils::base64Encode((const unsigned char *)getFeature()->data(),getFeature()->size());
    }
    else
    {
        ret["feature"]=Json::Value();
    }
    if(getRegisterTime())
    {
        ret["register_time"]=getValueOfRegisterTime();
    }
    else
    {
        ret["register_time"]=Json::Value();
    }
    return ret;
}

Json::Value Staff::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getIndexId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfIndexId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUid())
            {
                ret[pMasqueradingVector[2]]=getValueOfUid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[3]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPicUrl())
            {
                ret[pMasqueradingVector[4]]=getValueOfPicUrl();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getFeature())
            {
                ret[pMasqueradingVector[5]]=drogon::utils::base64Encode((const unsigned char *)getFeature()->data(),getFeature()->size());
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getRegisterTime())
            {
                ret[pMasqueradingVector[6]]=getValueOfRegisterTime();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getIndexId())
    {
        ret["index_id"]=(Json::UInt64)getValueOfIndexId();
    }
    else
    {
        ret["index_id"]=Json::Value();
    }
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getPicUrl())
    {
        ret["pic_url"]=getValueOfPicUrl();
    }
    else
    {
        ret["pic_url"]=Json::Value();
    }
    if(getFeature())
    {
        ret["feature"]=drogon::utils::base64Encode((const unsigned char *)getFeature()->data(),getFeature()->size());
    }
    else
    {
        ret["feature"]=Json::Value();
    }
    if(getRegisterTime())
    {
        ret["register_time"]=getValueOfRegisterTime();
    }
    else
    {
        ret["register_time"]=Json::Value();
    }
    return ret;
}

bool Staff::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("index_id"))
    {
        if(!validJsonOfField(1, "index_id", pJson["index_id"], err, true))
            return false;
    }
    if(pJson.isMember("uid"))
    {
        if(!validJsonOfField(2, "uid", pJson["uid"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(3, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("pic_url"))
    {
        if(!validJsonOfField(4, "pic_url", pJson["pic_url"], err, true))
            return false;
    }
    if(pJson.isMember("feature"))
    {
        if(!validJsonOfField(5, "feature", pJson["feature"], err, true))
            return false;
    }
    if(pJson.isMember("register_time"))
    {
        if(!validJsonOfField(6, "register_time", pJson["register_time"], err, true))
            return false;
    }
    return true;
}
bool Staff::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Staff::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("index_id"))
    {
        if(!validJsonOfField(1, "index_id", pJson["index_id"], err, false))
            return false;
    }
    if(pJson.isMember("uid"))
    {
        if(!validJsonOfField(2, "uid", pJson["uid"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(3, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("pic_url"))
    {
        if(!validJsonOfField(4, "pic_url", pJson["pic_url"], err, false))
            return false;
    }
    if(pJson.isMember("feature"))
    {
        if(!validJsonOfField(5, "feature", pJson["feature"], err, false))
            return false;
    }
    if(pJson.isMember("register_time"))
    {
        if(!validJsonOfField(6, "register_time", pJson["register_time"], err, false))
            return false;
    }
    return true;
}
bool Staff::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Staff::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
